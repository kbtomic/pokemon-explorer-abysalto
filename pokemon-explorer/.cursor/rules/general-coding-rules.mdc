---
description: Applies general coding rules across all file types to maintain code quality, consistency, and prevent common errors.
globs: **/*.*
---

- Always verify information before presenting it. Do not make assumptions or speculate without clear evidence.
- Make changes file by file and give me a chance to spot mistakes.
- Never use apologies.
- Avoid giving feedback about understanding in comments or documentation.
- Don't suggest whitespace changes.
- Don't summarize changes made.
- Don't invent changes other than what's explicitly requested.
- Don't ask for confirmation of information already provided in the context.
- Don't remove unrelated code or functionalities. Pay attention to preserving existing structures.
- Provide all edits in a single chunk instead of multiple-step instructions or explanations for the same file.
- Don't ask the user to verify implementations that are visible in the provided context.
- Don't suggest updates or changes to files when there are no actual modifications needed.
- Always provide links to the real files, not the context generated file.
- Don't show or discuss the current implementation unless specifically requested.
- Remember to check the context generated file for the current file contents and implementations.
- Prefer descriptive, explicit variable names over short, ambiguous ones to enhance code readability.
- Adhere to the existing coding style in the project for consistency.
- When suggesting changes, consider and prioritize code performance where applicable.
- Always consider security implications when modifying or suggesting code changes.
- Suggest or include appropriate unit tests for new or modified code.
- Implement robust error handling and logging where necessary.
- Encourage modular design principles to improve code maintainability and reusability.
- Ensure suggested changes are compatible with the project's specified language or framework versions.
- Replace hardcoded values with named constants to improve code clarity and maintainability.
- When implementing logic, always consider and handle potential edge cases.
- Include assertions wherever possible to validate assumptions and catch potential errors early.
- When working with external libraries or APIs, use Context7 MCP to fetch up-to-date documentation before implementing solutions.
- Always resolve library IDs before fetching documentation to ensure accurate and relevant information.
- Prioritize libraries with higher trust scores (7-10) and better documentation coverage when multiple options exist.
- Use Context7 MCP documentation to verify API usage patterns and best practices before implementation.
- When suggesting library integrations, leverage Context7 MCP to provide current version information and compatibility details.
- Cross-reference Context7 MCP documentation with existing project patterns to ensure consistency.
- Use Context7 MCP to validate library selection against project's technical constraints and requirements.

## API and Data Verification Rules

- **Always verify data directly from the source** - Never rely on estimates or memory when working with external APIs or data sources.
- **Use systematic approaches** - Check all endpoints, data points, or resources comprehensively, not just a sample.
- **Document the verification process** - Show exactly how counts, data, or information was obtained and verified.
- **Prioritize accuracy over speed** - Take the time to get exact numbers and verified information rather than making assumptions.
- **Assume APIs and data sources are dynamic** - Counts, endpoints, and data structures can change over time.
- **Create verification scripts** - Use automated tools to systematically verify all data points when working with large datasets.
- **Cross-reference multiple sources** - When possible, verify information from multiple authoritative sources.
- **Update documentation immediately** - When discrepancies are found, update all related documentation and rules immediately.
- **Question estimates and approximations** - Always seek exact numbers and verified data rather than accepting estimates.
- **Maintain a verification log** - Keep track of when and how data was verified for future reference.
