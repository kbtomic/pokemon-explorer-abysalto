---
description: Next.js best practices and patterns for modern web applications with App Router
globs: **/*.tsx,**/*.ts,**/*.js,**/*.jsx
---

# Next.js Best Practices

## App Router Patterns

- Use file-based routing with the app directory structure
- Create layout.tsx files for shared UI across routes
- Use page.tsx for route-specific content
- Implement loading.tsx for loading states
- Create error.tsx for error boundaries
- Use route groups with parentheses for organization

## Server vs Client Components

- Default to Server Components for better performance
- Use Client Components only when needed (interactivity, browser APIs)
- Mark Client Components with "use client" directive
- Keep Client Components as small as possible
- Pass data down from Server to Client Components

```tsx
// Server Component (default)
export default async function PokemonList() {
  const pokemon = await fetchPokemon();
  return (
    <div>
      {pokemon.map((p) => (
        <PokemonCard key={p.id} pokemon={p} />
      ))}
    </div>
  );
}

// Client Component (when needed)
("use client");
import { useState } from "react";

export default function SearchBar() {
  const [query, setQuery] = useState("");
  return (
    <input
      value={query}
      onChange={(e) => setQuery(e.target.value)}
      placeholder="Search pokemon..."
    />
  );
}
```

## Performance Optimization

- Use Next/Image for optimized image loading
- Implement font optimization with next/font
- Use dynamic imports for code splitting
- Leverage React Suspense for loading states
- Implement proper caching strategies

```tsx
// Optimized image loading
import Image from "next/image";

export default function PokemonCard({ pokemon }) {
  return (
    <div>
      <Image
        src={pokemon.image}
        alt={pokemon.name}
        width={200}
        height={200}
        priority={false}
        placeholder="blur"
        blurDataURL="data:image/jpeg;base64,..."
      />
    </div>
  );
}

// Font optimization
import { Geist } from "next/font/google";

const geist = Geist({
  subsets: ["latin"],
  variable: "--font-geist",
});

// Dynamic imports
import dynamic from "next/dynamic";

const HeavyComponent = dynamic(() => import("./HeavyComponent"), {
  loading: () => <div>Loading...</div>,
  ssr: false,
});
```

## Data Fetching Patterns

- Use Server Components for server-side data fetching
- Implement proper error handling and loading states
- Use SWR or React Query for client-side data fetching
- Create API routes for backend functionality
- Implement proper caching and revalidation

```tsx
// Server-side data fetching
export default async function PokemonPage({
  params,
}: {
  params: { id: string };
}) {
  try {
    const pokemon = await fetch(
      `https://pokeapi.co/api/v2/pokemon/${params.id}`,
      {
        next: { revalidate: 3600 }, // Cache for 1 hour
      }
    );

    if (!pokemon.ok) {
      throw new Error("Failed to fetch pokemon");
    }

    const data = await pokemon.json();
    return <PokemonDetail pokemon={data} />;
  } catch (error) {
    return <ErrorComponent error={error} />;
  }
}

// API route
// app/api/pokemon/route.ts
import { NextRequest, NextResponse } from "next/server";

export async function GET(request: NextRequest) {
  const { searchParams } = new URL(request.url);
  const id = searchParams.get("id");

  try {
    const response = await fetch(`https://pokeapi.co/api/v2/pokemon/${id}`);
    const data = await response.json();

    return NextResponse.json(data);
  } catch (error) {
    return NextResponse.json(
      { error: "Failed to fetch pokemon" },
      { status: 500 }
    );
  }
}
```

## Metadata & SEO

- Use dynamic metadata for SEO optimization
- Implement Open Graph tags for social sharing
- Add structured data for search engines
- Create sitemap.xml for better indexing
- Use proper meta tags for accessibility

```tsx
// Dynamic metadata
import { Metadata } from "next";

export async function generateMetadata({
  params,
}: {
  params: { id: string };
}): Promise<Metadata> {
  const pokemon = await fetchPokemon(params.id);

  return {
    title: `${pokemon.name} | Pokemon Explorer`,
    description: `Learn about ${pokemon.name}, a ${pokemon.type} type Pokemon.`,
    openGraph: {
      title: pokemon.name,
      description: `Learn about ${pokemon.name}`,
      images: [pokemon.image],
    },
    twitter: {
      card: "summary_large_image",
      title: pokemon.name,
      description: `Learn about ${pokemon.name}`,
      images: [pokemon.image],
    },
  };
}

// Root metadata
export const metadata: Metadata = {
  title: {
    template: "%s | Pokemon Explorer",
    default: "Pokemon Explorer",
  },
  description: "Explore the world of Pokemon",
  keywords: ["pokemon", "pokedex", "gaming"],
};
```

## Configuration & Setup

- Configure Next.js for optimal performance
- Use environment variables for configuration
- Implement middleware for request processing
- Set up proper TypeScript configuration
- Configure build and deployment settings

```tsx
// next.config.ts
import type { NextConfig } from "next";

const nextConfig: NextConfig = {
  experimental: {
    turbo: {
      rules: {
        "*.svg": {
          loaders: ["@svgr/webpack"],
          as: "*.js",
        },
      },
    },
  },
  images: {
    domains: ["raw.githubusercontent.com", "assets.pokemon.com"],
    formats: ["image/webp", "image/avif"],
  },
  async headers() {
    return [
      {
        source: "/(.*)",
        headers: [
          {
            key: "X-Frame-Options",
            value: "DENY",
          },
        ],
      },
    ];
  },
};

export default nextConfig;

// middleware.ts
import { NextResponse } from "next/server";
import type { NextRequest } from "next/server";

export function middleware(request: NextRequest) {
  // Add security headers
  const response = NextResponse.next();
  response.headers.set("X-Content-Type-Options", "nosniff");
  response.headers.set("X-Frame-Options", "DENY");

  return response;
}

export const config = {
  matcher: "/((?!api|_next/static|_next/image|favicon.ico).*)",
};
```

## File Organization

- Organize app directory by feature or route
- Use route groups for logical organization
- Keep components close to their usage
- Create shared components in app/components
- Organize utilities and types separately

```
app/
├── (auth)/
│   ├── login/
│   │   └── page.tsx
│   └── register/
│       └── page.tsx
├── (dashboard)/
│   ├── layout.tsx
│   ├── pokemon/
│   │   ├── [id]/
│   │   │   └── page.tsx
│   │   └── page.tsx
│   └── page.tsx
├── api/
│   └── pokemon/
│       └── route.ts
├── components/
│   ├── ui/
│   └── pokemon/
├── lib/
│   ├── utils.ts
│   └── api.ts
├── types/
│   └── pokemon.ts
├── globals.css
├── layout.tsx
└── page.tsx
```

## Error Handling

- Implement error boundaries with error.tsx
- Use proper error types and messages
- Handle async errors gracefully
- Provide fallback UI for errors
- Log errors appropriately

```tsx
// app/error.tsx
"use client";

import { useEffect } from "react";

export default function Error({
  error,
  reset,
}: {
  error: Error & { digest?: string };
  reset: () => void;
}) {
  useEffect(() => {
    console.error(error);
  }, [error]);

  return (
    <div className="flex flex-col items-center justify-center min-h-screen">
      <h2 className="text-2xl font-bold mb-4">Something went wrong!</h2>
      <p className="text-gray-600 mb-4">{error.message}</p>
      <button
        onClick={reset}
        className="px-4 py-2 bg-blue-600 text-white rounded-md hover:bg-blue-700"
      >
        Try again
      </button>
    </div>
  );
}

// Loading state
// app/loading.tsx
export default function Loading() {
  return (
    <div className="flex items-center justify-center min-h-screen">
      <div className="animate-spin rounded-full h-32 w-32 border-b-2 border-blue-600"></div>
    </div>
  );
}
```

## Development Patterns

- Use Turbopack for faster development
- Implement proper debugging strategies
- Set up testing with Jest and React Testing Library
- Use ESLint and Prettier for code quality
- Configure proper development environment

```tsx
// Development utilities
// lib/debug.ts
export const debug = (message: string, data?: any) => {
  if (process.env.NODE_ENV === "development") {
    console.log(`[DEBUG] ${message}`, data);
  }
};

// Testing setup
// __tests__/pokemon.test.tsx
import { render, screen } from "@testing-library/react";
import PokemonCard from "../app/components/PokemonCard";

describe("PokemonCard", () => {
  it("renders pokemon information", () => {
    const pokemon = {
      id: 1,
      name: "bulbasaur",
      image: "/bulbasaur.png",
    };

    render(<PokemonCard pokemon={pokemon} />);
    expect(screen.getByText("bulbasaur")).toBeInTheDocument();
  });
});
```

## Security Best Practices

- Validate all user inputs
- Use proper authentication and authorization
- Implement CSRF protection
- Sanitize data before rendering
- Use secure headers and cookies

```tsx
// Input validation
import { z } from "zod";

const pokemonSchema = z.object({
  id: z.number().positive(),
  name: z.string().min(1).max(50),
  type: z.enum(["fire", "water", "grass", "electric"]),
});

// API route with validation
export async function POST(request: NextRequest) {
  try {
    const body = await request.json();
    const validatedData = pokemonSchema.parse(body);

    // Process validated data
    return NextResponse.json({ success: true });
  } catch (error) {
    return NextResponse.json({ error: "Invalid data" }, { status: 400 });
  }
}
```

## Deployment Considerations

- Configure proper build settings
- Set up environment variables for production
- Implement proper caching strategies
- Use CDN for static assets
- Monitor performance and errors

```tsx
// Environment configuration
// lib/config.ts
export const config = {
  apiUrl: process.env.NEXT_PUBLIC_API_URL || "http://localhost:3000",
  environment: process.env.NODE_ENV || "development",
  isProduction: process.env.NODE_ENV === "production",
};

// Build optimization
// next.config.ts
const nextConfig: NextConfig = {
  output: "standalone", // For containerized deployments
  compress: true,
  poweredByHeader: false,
  generateEtags: false,
};
```
